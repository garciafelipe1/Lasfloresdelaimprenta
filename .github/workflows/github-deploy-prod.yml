name: Vercel Production Deployment

on:
  push:
    branches:
      - main
    paths:
      - "apps/www/**"
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    steps:
      # 1Ô∏è‚É£ Clonar el repositorio
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      # 3Ô∏è‚É£ Configurar pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.6.5

      # 4Ô∏è‚É£ Cache de pnpm store
      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # 5Ô∏è‚É£ Instalar Vercel CLI globalmente
      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      # 6Ô∏è‚É£ Instalar dependencias con retry autom√°tico
      - name: Install Dependencies with Retry
        working-directory: ./apps/www
        run: |
          RETRIES=3
          for i in $(seq 1 $RETRIES); do
            echo "Attempt $i of $RETRIES..."
            pnpm install --frozen-lockfile --prefer-offline --reporter=append-only && break
            echo "pnpm install failed, retrying in 15 seconds..."
            sleep 15
          done

      # 7Ô∏è‚É£ Pull de variables de Vercel
      - name: Pull Vercel Environment Information
        working-directory: ./apps/www
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      # 8Ô∏è‚É£ Crear archivo .env.production
      - name: Create .env.production
        working-directory: ./apps/www
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" > .env.production
          echo "DATABASE_AUTH_TOKEN=${{ secrets.DATABASE_AUTH_TOKEN }}" >> .env.production
          echo "MP_ACCESS_TOKEN=${{ secrets.MP_ACCESS_TOKEN }}" >> .env.production
          echo "MP_PUBLIC_KEY=${{ secrets.MP_PUBLIC_KEY }}" >> .env.production
          echo "MP_CLIENT_ID=${{ secrets.MP_CLIENT_ID }}" >> .env.production
          echo "MP_CLIENT_SECRET=${{ secrets.MP_CLIENT_SECRET }}" >> .env.production
          echo "MP_WEBHOOK_KEY=${{ secrets.MP_WEBHOOK_KEY }}" >> .env.production
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
          echo "S3_URL=${{ secrets.S3_URL }}" >> .env.production
          echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env.production
          echo "S3_KEY_ID=${{ secrets.S3_KEY_ID }}" >> .env.production
          echo "S3_SECRET=${{ secrets.S3_SECRET }}" >> .env.production
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.production
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.production
          echo "MEDUSA_BACKEND_URL=${{ secrets.MEDUSA_BACKEND_URL }}" >> .env.production

      # 9Ô∏è‚É£ Construir proyecto
      - name: Build Project
        working-directory: ./apps/www
        run: pnpm run build

      # üîü Desplegar a Vercel
      - name: Deploy Project to Vercel
        working-directory: ./apps/www
        run: vercel deploy --prod --yes --token=${{ secrets.VERCEL_TOKEN }}

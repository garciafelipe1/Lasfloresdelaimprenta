name: Vercel Production Deployment

on:
  push:
    branches:
      - main
    paths:
      - "apps/www/**"
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Clonar repositorio
      - uses: actions/checkout@v4
        name: Checkout Repository
      - run: echo "✅ Repositorio clonado"

      # 2️⃣ Setup Node.js 20
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: |
          echo "✅ Node.js configurado"
          node -v
          npm -v

      # 3️⃣ Setup pnpm 10.17.x
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.17.1
      - run: |
          echo "✅ pnpm configurado"
          pnpm -v

      # 4️⃣ Cache pnpm store
      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-v2
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - run: echo "✅ Cache pnpm configurado"

      # 5️⃣ Instalar Vercel CLI
      - name: Install Vercel CLI
        run: |
          set -e
          echo "🔹 Instalando Vercel CLI globalmente"
          pnpm install --global vercel@latest
          vercel --version
          echo "✅ Vercel CLI instalado"

      # 6️⃣ Instalar dependencias con retry y registry explícito
      - name: Install Dependencies with Retry
        run: |
          set -e
          echo "🔹 Configurando registry pnpm"
          pnpm config set registry https://registry.npmjs.org/
          RETRIES=3
          for i in $(seq 1 $RETRIES); do
            echo "🔹 Attempt $i of $RETRIES..."
            if pnpm install --frozen-lockfile --prefer-offline; then
              echo "✅ Dependencias instaladas correctamente"
              break
            else
              echo "⚠ pnpm install falló en intento $i"
              if [ "$i" -lt "$RETRIES" ]; then
                echo "⏳ Reintentando en 15 segundos..."
                sleep 15
              else
                echo "❌ No se pudo instalar dependencias después de $RETRIES intentos"
                exit 1
              fi
            fi
          done

      # 7️⃣ Pull variables de Vercel
      - name: Pull Vercel Environment Information
        working-directory: ./apps/www
        run: |
          set -e
          echo "🔹 Obteniendo variables de entorno de Vercel"
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          echo "✅ Variables de entorno obtenidas"

      # 8️⃣ Crear archivo .env.production
      - name: Create .env.production
        working-directory: ./apps/www
        run: |
          set -e
          echo "🔹 Creando .env.production"
          echo "DB_URL=${{ secrets.DB_URL }}" > .env.production
          echo "DATABASE_AUTH_TOKEN=${{ secrets.DATABASE_AUTH_TOKEN }}" >> .env.production
          echo "MP_ACCESS_TOKEN=${{ secrets.MP_ACCESS_TOKEN }}" >> .env.production
          echo "MP_PUBLIC_KEY=${{ secrets.MP_PUBLIC_KEY }}" >> .env.production
          echo "MP_CLIENT_ID=${{ secrets.MP_CLIENT_ID }}" >> .env.production
          echo "MP_CLIENT_SECRET=${{ secrets.MP_CLIENT_SECRET }}" >> .env.production
          echo "MP_WEBHOOK_KEY=${{ secrets.MP_WEBHOOK_KEY }}" >> .env.production
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
          echo "S3_URL=${{ secrets.S3_URL }}" >> .env.production
          echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env.production
          echo "S3_KEY_ID=${{ secrets.S3_KEY_ID }}" >> .env.production
          echo "S3_SECRET=${{ secrets.S3_SECRET }}" >> .env.production
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.production
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.production
          echo "MEDUSA_BACKEND_URL=${{ secrets.MEDUSA_BACKEND_URL }}" >> .env.production
          echo "NEXT_PUBLIC_MEDUSA_BACKEND_URL=${{ secrets.MEDUSA_BACKEND_URL }}" >> .env.production
          echo "NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=${{ secrets.MEDUSA_PUBLISHABLE_KEY }}" >> .env.production
          echo "NEXT_PUBLIC_DEFAULT_REGION=${{ secrets.DEFAULT_REGION }}" >> .env.production
          echo "✅ .env.production creado"

      # 9️⃣ Build proyecto
      - name: Build Project
        run: |
          set -e
          echo "🔹 Iniciando build del proyecto"
          pnpm --filter ./apps/www build
          echo "✅ Build completado"

      # 🔟 Deploy a Vercel
      - name: Deploy Project to Vercel
        run: |
          set -e
          echo "🔹 Iniciando deploy a Vercel"
          vercel deploy --prod --yes --token=${{ secrets.VERCEL_TOKEN }} --project=repara-todobbl/www
          echo "✅ Deploy finalizado"
